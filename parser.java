
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.Reader;
import java.util.stream.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\007\000\002\002\004\000\002\003" +
    "\005\000\002\003\012\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\005\011\000\002\005\012\000" +
    "\002\005\010\000\002\005\010\000\002\005\010\000\002" +
    "\020\002\000\002\005\016\000\002\021\002\000\002\005" +
    "\016\000\002\005\010\000\002\005\006\000\002\006\004" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\010\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\010\007\000\002\010" +
    "\007\000\002\010\007\000\002\012\002\000\002\013\002" +
    "\000\002\014\002\000\002\015\002\000\002\016\002\000" +
    "\002\017\002\000\002\011\003\000\002\011\003\000\002" +
    "\007\003\000\002\007\006\000\002\007\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\023\004\001\002\000\006\005\ufffd\024" +
    "\ufffd\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\006\005\011\024\010\001\002\000\020\005" +
    "\uffe2\031\027\035\023\036\031\041\024\046\021\047\030" +
    "\001\002\000\006\006\012\027\013\001\002\000\004\004" +
    "\014\001\002\000\006\005\uffff\024\uffff\001\002\000\004" +
    "\026\015\001\002\000\004\004\016\001\002\000\004\007" +
    "\017\001\002\000\004\027\020\001\002\000\006\005\ufffe" +
    "\024\ufffe\001\002\000\004\005\uffe0\001\002\000\004\005" +
    "\uffe0\001\002\000\006\004\uffde\005\uffde\001\002\000\004" +
    "\005\113\001\002\000\022\005\uffe2\025\112\031\027\035" +
    "\023\036\031\041\024\046\021\047\030\001\002\000\032" +
    "\005\ufffb\025\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\041\ufffb\045\ufffb\046\ufffb\047\ufffb\001\002" +
    "\000\006\004\uffde\005\uffde\001\002\000\006\004\uffe3\005" +
    "\uffe3\001\002\000\020\005\uffe2\031\027\035\023\036\031" +
    "\041\024\046\021\047\030\001\002\000\020\005\uffe2\031" +
    "\027\035\033\036\031\041\024\046\021\047\030\001\002" +
    "\000\006\004\uffde\005\uffde\001\002\000\032\005\ufffc\025" +
    "\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\041\ufffc\045\ufffc\046\ufffc\047\ufffc\001\002\000\006\004" +
    "\uffe3\005\uffe3\001\002\000\006\036\073\040\074\001\002" +
    "\000\006\004\041\005\040\001\002\000\050\006\066\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\027\uffdb\030\uffdb\032" +
    "\uffdb\036\uffdb\040\uffdb\043\uffdb\044\uffdb\001\002\000\044" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\027\uffdd\032\uffdd" +
    "\036\uffdd\040\uffdd\043\uffdd\044\uffdd\001\002\000\044\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\027\uffdc\032\uffdc\036" +
    "\uffdc\040\uffdc\043\uffdc\044\uffdc\001\002\000\016\015\045" +
    "\016\051\017\044\020\046\021\047\022\050\001\002\000" +
    "\006\004\uffe2\005\uffe2\001\002\000\006\004\uffe2\005\uffe2" +
    "\001\002\000\006\004\uffe2\005\uffe2\001\002\000\006\004" +
    "\uffe2\005\uffe2\001\002\000\006\004\uffe2\005\uffe2\001\002" +
    "\000\006\004\uffe2\005\uffe2\001\002\000\006\004\041\005" +
    "\040\001\002\000\010\032\uffe8\036\uffe8\040\uffe8\001\002" +
    "\000\006\004\041\005\040\001\002\000\010\032\uffe4\036" +
    "\uffe4\040\uffe4\001\002\000\006\004\041\005\040\001\002" +
    "\000\010\032\uffe5\036\uffe5\040\uffe5\001\002\000\006\004" +
    "\041\005\040\001\002\000\010\032\uffe6\036\uffe6\040\uffe6" +
    "\001\002\000\006\004\041\005\040\001\002\000\010\032" +
    "\uffe9\036\uffe9\040\uffe9\001\002\000\006\004\041\005\040" +
    "\001\002\000\010\032\uffe7\036\uffe7\040\uffe7\001\002\000" +
    "\006\004\070\005\067\001\002\000\004\007\072\001\002" +
    "\000\004\007\071\001\002\000\046\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\027\uffd9\030\uffd9\032\uffd9\036\uffd9\040" +
    "\uffd9\043\uffd9\044\uffd9\001\002\000\046\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\027\uffda\030\uffda\032\uffda\036\uffda" +
    "\040\uffda\043\uffda\044\uffda\001\002\000\020\005\uffe2\031" +
    "\027\035\023\036\031\041\024\046\021\047\030\001\002" +
    "\000\032\005\ufff6\025\ufff6\031\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\041\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\001\002\000\022\005\uffe2\031\027\035\023\036\031\037" +
    "\076\041\024\046\021\047\030\001\002\000\032\005\ufff7" +
    "\025\ufff7\031\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\041\ufff7\045\ufff7\046\ufff7\047\ufff7\001\002\000\006" +
    "\004\041\005\040\001\002\000\004\027\101\001\002\000" +
    "\032\005\ufff0\025\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\041\ufff0\045\ufff0\046\ufff0\047\ufff0\001" +
    "\002\000\006\004\uffe3\005\uffe3\001\002\000\004\032\104" +
    "\001\002\000\020\005\uffe2\031\027\035\023\036\031\041" +
    "\024\046\021\047\030\001\002\000\024\005\uffe2\031\027" +
    "\033\106\034\107\035\023\036\031\041\024\046\021\047" +
    "\030\001\002\000\020\005\uffe2\031\027\035\023\036\031" +
    "\041\024\046\021\047\030\001\002\000\032\005\ufff8\025" +
    "\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\041\ufff8\045\ufff8\046\ufff8\047\ufff8\001\002\000\022\005" +
    "\uffe2\031\027\034\111\035\023\036\031\041\024\046\021" +
    "\047\030\001\002\000\032\005\ufff9\025\ufff9\031\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\001\002\000\004\002\001\001\002\000" +
    "\004\042\114\001\002\000\006\004\uffe3\005\uffe3\001\002" +
    "\000\006\004\041\005\040\001\002\000\006\043\117\044" +
    "\120\001\002\000\006\004\uffe2\005\uffe2\001\002\000\006" +
    "\004\uffe2\005\uffe2\001\002\000\006\004\041\005\040\001" +
    "\002\000\004\036\123\001\002\000\020\005\ufff3\031\ufff3" +
    "\035\ufff3\036\ufff3\041\ufff3\046\ufff3\047\ufff3\001\002\000" +
    "\020\005\uffe2\031\027\035\023\036\031\041\024\046\021" +
    "\047\030\001\002\000\022\005\uffe2\031\027\035\023\036" +
    "\031\041\024\045\126\046\021\047\030\001\002\000\032" +
    "\005\ufff2\025\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\041\ufff2\045\ufff2\046\ufff2\047\ufff2\001\002" +
    "\000\006\004\041\005\040\001\002\000\004\036\131\001" +
    "\002\000\020\005\ufff5\031\ufff5\035\ufff5\036\ufff5\041\ufff5" +
    "\046\ufff5\047\ufff5\001\002\000\020\005\uffe2\031\027\035" +
    "\023\036\031\041\024\046\021\047\030\001\002\000\022" +
    "\005\uffe2\031\027\035\023\036\031\041\024\045\134\046" +
    "\021\047\030\001\002\000\032\005\ufff4\025\ufff4\031\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\041\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\001\002\000\006\004\uffe3\005\uffe3" +
    "\001\002\000\004\036\073\001\002\000\004\005\040\001" +
    "\002\000\004\030\uffdf\001\002\000\004\030\142\001\002" +
    "\000\006\004\uffe3\005\uffe3\001\002\000\004\027\172\001" +
    "\002\000\006\004\041\005\040\001\002\000\016\010\146" +
    "\011\150\012\152\013\151\014\147\027\uffef\001\002\000" +
    "\006\004\uffe2\005\uffe2\001\002\000\006\004\uffe2\005\uffe2" +
    "\001\002\000\006\004\uffe2\005\uffe2\001\002\000\006\004" +
    "\uffe2\005\uffe2\001\002\000\006\004\uffe2\005\uffe2\001\002" +
    "\000\006\004\041\005\040\001\002\000\004\027\uffe1\001" +
    "\002\000\004\027\uffec\001\002\000\006\004\041\005\040" +
    "\001\002\000\004\027\uffe1\001\002\000\004\027\uffeb\001" +
    "\002\000\006\004\041\005\040\001\002\000\004\027\uffe3" +
    "\001\002\000\004\027\uffed\001\002\000\006\004\041\005" +
    "\040\001\002\000\004\027\uffe3\001\002\000\004\027\uffea" +
    "\001\002\000\006\004\041\005\040\001\002\000\004\027" +
    "\uffe3\001\002\000\004\027\uffee\001\002\000\032\005\ufffa" +
    "\025\ufffa\031\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\041\ufffa\045\ufffa\046\ufffa\047\ufffa\001\002\000\004" +
    "\005\uffe3\001\002\000\004\005\040\001\002\000\004\027" +
    "\uffdf\001\002\000\004\027\177\001\002\000\032\005\ufff1" +
    "\025\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\041\ufff1\045\ufff1\046\ufff1\047\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\002\004\001\001\000\004\003\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\024\005\025\013\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\172\001\001\000\004\015\136" +
    "\001\001\000\004\017\134\001\001\000\002\001\001\000" +
    "\006\005\033\013\021\001\001\000\002\001\001\000\004" +
    "\017\101\001\001\000\004\012\076\001\001\000\010\004" +
    "\031\005\025\013\021\001\001\000\006\005\033\013\021" +
    "\001\001\000\004\017\034\001\001\000\002\001\001\000" +
    "\006\010\035\012\036\001\001\000\002\001\001\000\006" +
    "\007\041\011\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\063" +
    "\001\001\000\004\013\061\001\001\000\004\013\057\001" +
    "\001\000\004\013\055\001\001\000\004\013\053\001\001" +
    "\000\004\013\051\001\001\000\006\007\041\011\052\001" +
    "\001\000\002\001\001\000\006\007\041\011\054\001\001" +
    "\000\002\001\001\000\006\007\041\011\056\001\001\000" +
    "\002\001\001\000\006\007\041\011\060\001\001\000\002" +
    "\001\001\000\006\007\041\011\062\001\001\000\002\001" +
    "\001\000\006\007\041\011\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\074\005\025" +
    "\013\021\001\001\000\002\001\001\000\006\005\033\013" +
    "\021\001\001\000\002\001\001\000\006\007\041\011\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\102\012\036\001\001\000\002\001\001\000\010\004\104" +
    "\005\025\013\021\001\001\000\006\005\033\013\021\001" +
    "\001\000\010\004\107\005\025\013\021\001\001\000\002" +
    "\001\001\000\006\005\033\013\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\114" +
    "\001\001\000\006\007\041\011\115\001\001\000\002\001" +
    "\001\000\004\013\126\001\001\000\004\013\120\001\001" +
    "\000\006\007\041\011\121\001\001\000\002\001\001\000" +
    "\004\021\123\001\001\000\010\004\124\005\025\013\021" +
    "\001\001\000\006\005\033\013\021\001\001\000\002\001" +
    "\001\000\006\007\041\011\127\001\001\000\002\001\001" +
    "\000\004\020\131\001\001\000\010\004\132\005\025\013" +
    "\021\001\001\000\006\005\033\013\021\001\001\000\002" +
    "\001\001\000\006\010\135\012\036\001\001\000\002\001" +
    "\001\000\004\007\137\001\001\000\004\016\140\001\001" +
    "\000\002\001\001\000\006\006\142\012\143\001\001\000" +
    "\002\001\001\000\006\007\041\011\144\001\001\000\002" +
    "\001\001\000\004\013\166\001\001\000\004\013\163\001" +
    "\001\000\004\013\160\001\001\000\004\013\155\001\001" +
    "\000\004\013\152\001\001\000\006\007\041\011\153\001" +
    "\001\000\004\014\154\001\001\000\002\001\001\000\006" +
    "\007\041\011\156\001\001\000\004\014\157\001\001\000" +
    "\002\001\001\000\006\007\041\011\161\001\001\000\004" +
    "\012\162\001\001\000\002\001\001\000\006\007\041\011" +
    "\164\001\001\000\004\012\165\001\001\000\002\001\001" +
    "\000\006\007\041\011\167\001\001\000\004\012\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\173" +
    "\001\001\000\004\007\174\001\001\000\004\016\175\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private CodeGenerator codeGen;

    public parser(Lexer lexer, CodeGenerator codeGen) {
        setScanner(lexer);
        this.codeGen = codeGen;
    }

    @Override
    public void syntax_error(Symbol currentToken) {
        codeGen.error("Błąd składniowy");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= DECLARE declarations IN commands END 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> c = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 codeGen.program(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= declarations pidentifier SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 codeGen.newScalar(id, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations pidentifier LEFT num COLON num RIGHT SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Long from = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Long to = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 codeGen.newArray(id, from, to); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // commands ::= commands command 
            {
              Stream<Command> RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> c1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> c2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = CodeGenerator.concat(c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // commands ::= command 
            {
              Stream<Command> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> c = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commands",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= regc mutable identifier immutable ASSIGN expression SEMI 
            {
              Stream<Command> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> id = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> expr = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.assign(id, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= IF newlabel condition THEN commands ELSE commands ENDIF 
            {
              Stream<Command> RESULT =null;
		int failleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int failright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Label fail = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Stream<Command> cond = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stream<Command> ifTrue = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> ifFalse = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.ifThenElse(cond, ifTrue, ifFalse, fail); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= IF newlabel condition THEN commands ENDIF 
            {
              Stream<Command> RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Label end = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stream<Command> cond = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> ifTrue = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.ifThen(cond, ifTrue, end); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= WHILE newlabel condition DO commands ENDWHILE 
            {
              Stream<Command> RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Label end = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stream<Command> cond = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> body = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.whileLoop(cond, body, end); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= DO commands WHILE newlabel condition ENDDO 
            {
              Stream<Command> RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> body = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Label end = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> cond = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.doLoop(body, cond, end); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Stream<Command> RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> from = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> to = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 codeGen.newScalar(it, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command ::= FOR pidentifier FROM regb value TO regc value DO NT$0 commands ENDFOR 
            {
              Stream<Command> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Stream<Command>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Stream<Command> from = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> to = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> body = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.forLoop(it, from, to, body, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Stream<Command> RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> from = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> to = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 codeGen.newScalar(it, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command ::= FOR pidentifier FROM regb value DOWNTO regc value DO NT$1 commands ENDFOR 
            {
              Stream<Command> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Stream<Command>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Stream<Command> from = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> to = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> body = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.forLoop(it, from, to, body, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= READ mutable regb identifier immutable SEMI 
            {
              Stream<Command> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stream<Command> id = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = codeGen.read(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command ::= WRITE regb value SEMI 
            {
              Stream<Command> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> val = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.write(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= regb value 
            {
              Stream<Command> RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> vl = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= regb value PLUS regc value regb 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.plus(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= regb value MINUS regc value regb 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.minus(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= regb value TIMES regc value regd 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.times(v1, v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= regb value DIVIDE regc value regd 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.divide(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= regb value MODULO regc value regb 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.modulo(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condition ::= regb value EQ regc value 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = codeGen.equal(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= regb value NEQ regc value 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = codeGen.nequal(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= regb value LT regc value 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = codeGen.lt(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= regb value GT regc value 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = codeGen.gt(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= regb value LE regc value 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = codeGen.le(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= regb value GE regc value 
            {
              Stream<Command> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stream<Command> v1 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> v2 = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = codeGen.ge(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // regb ::= 
            {
              Object RESULT =null;
		 codeGen.reg = 'B'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regb",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // regc ::= 
            {
              Object RESULT =null;
		 codeGen.reg = 'C'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // regd ::= 
            {
              Object RESULT =null;
		 codeGen.reg = 'D'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regd",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mutable ::= 
            {
              Object RESULT =null;
		 codeGen.mutable = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mutable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // immutable ::= 
            {
              Object RESULT =null;
		 codeGen.mutable = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("immutable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // newlabel ::= 
            {
              Label RESULT =null;
		 RESULT = codeGen.jump = new Label(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("newlabel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= num 
            {
              Stream<Command> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long n = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = codeGen.number(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= identifier 
            {
              Stream<Command> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stream<Command> id = (Stream<Command>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = codeGen.load(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // identifier ::= pidentifier 
            {
              Stream<Command> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = codeGen.scalar(var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identifier ::= pidentifier LEFT pidentifier RIGHT 
            {
              Stream<Command> RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tab = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.arrayVar(tab, var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identifier ::= pidentifier LEFT num RIGHT 
            {
              Stream<Command> RESULT =null;
		int tableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tab = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Long index = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = codeGen.arrayNum(tab, index); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
